import streamlit as st
import pandas as pd
import pickle
from datetime import datetime

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application permet de pr√©dire la **quantit√© produite (en tonnes)** selon la **fili√®re**, le **produit** et l‚Äô**ann√©e** s√©lectionn√©e, en utilisant un mod√®le de Machine Learning.")
st.divider()

# =============================================================================
# Chargement du mod√®le et des donn√©es
# =============================================================================

# Utiliser le cache pour ne charger le mod√®le qu'une seule fois
@st.cache_resource
def load_model():
    """Charge le pipeline de mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("Le fichier du mod√®le 'modele/modelagr.pkl' n'a pas √©t√© trouv√©. Assurez-vous d'avoir ex√©cut√© le notebook d'entra√Ænement.")
        return None

# Utiliser le cache pour ne charger les donn√©es qu'une seule fois
@st.cache_data
def load_data(path):
    """Charge les donn√©es depuis un fichier CSV."""
    try:
        data = pd.read_csv(path)
        return data
    except FileNotFoundError:
        st.error(f"Le fichier de donn√©es '{path}' est introuvable.")
        return None

model = load_model()
df = load_data("data/dataagr.csv")

# Si le chargement a √©chou√©, on arr√™te l'application
if model is None or df is None:
    st.stop()

# =============================================================================
# Calcul du 'time_index' - √âTAPE CRUCIALE
# =============================================================================
# Le mod√®le a √©t√© entra√Æn√© avec 'time_index' (year - min_year).
# Nous devons reproduire ce calcul pour la pr√©diction.
min_year = df['year'].min()
print(f"Ann√©e minimale d√©tect√©e dans les donn√©es : {min_year}")


# =============================================================================
# Interface utilisateur (Widgets Streamlit)
# =============================================================================

st.subheader("Veuillez faire vos s√©lections :")

# 1. S√©lection de la fili√®re
filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

# 2. S√©lection du produit (filtr√© par fili√®re)
produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
if not produits_filtres:
    st.warning("Aucun produit disponible pour cette fili√®re.")
    st.stop()
produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)

# 3. S√©lection de l'ann√©e
current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=min_year,
    max_value=current_year + 20, # Permet de pr√©dire 20 ans dans le futur
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    # Cr√©ation du DataFrame pour la pr√©diction avec les bonnes colonnes
    time_index_value = selected_year - min_year

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'time_index': [time_index_value] # Utiliser 'time_index'
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le pour pr√©diction :")
    st.dataframe(input_df)

    try:
        # Le mod√®le attend un DataFrame avec les colonnes 'Fili√®re', 'Produit', 'time_index'
        prediction = model.predict(input_df)[0]

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        st.metric(label="R√©sultat", value=f"{prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error("Une erreur est survenue lors de la pr√©diction.")
        st.error(f"D√©tails de l'erreur : {e}")
