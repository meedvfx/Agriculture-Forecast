import streamlit as st
import pandas as pd
import pickle
from datetime import datetime

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application utilise un mod√®le de Machine Learning avanc√© pour pr√©dire la **quantit√© produite (en tonnes)** selon la **fili√®re**, le **produit** et l‚Äô**ann√©e** s√©lectionn√©e.")
st.divider()

# =============================================================================
# Chargement du mod√®le et des donn√©es
# =============================================================================

# Utiliser le cache pour ne charger le mod√®le qu'une seule fois
@st.cache_resource
def load_model():
    """Charge le pipeline de mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("Le fichier du mod√®le 'modele/modelagr.pkl' n'a pas √©t√© trouv√©. Assurez-vous d'avoir ex√©cut√© le notebook d'entra√Ænement.")
        return None

# Utiliser le cache pour ne charger les donn√©es qu'une seule fois
@st.cache_data
def load_data(path):
    """Charge et pr√©pare les donn√©es depuis un fichier CSV."""
    try:
        data = pd.read_csv(path)
        # --- Nettoyage robuste de la colonne 'year' (CORRIG√â) ---
        # La colonne 'year' contient des dates compl√®tes (ex: '2011-01-01').
        # On la convertit en format datetime, puis on extrait l'ann√©e.
        data['year'] = pd.to_datetime(data['year'], errors='coerce')
        # Supprime les lignes o√π la date est invalide
        data.dropna(subset=['year'], inplace=True)
        # On garde uniquement l'ann√©e (ex: 2011) et on la convertit en entier
        data['year'] = data['year'].dt.year.astype(int)
        return data
    except FileNotFoundError:
        st.error(f"Le fichier de donn√©es '{path}' est introuvable.")
        return None

# Correction du chemin d'acc√®s au fichier de donn√©es
model = load_model()
df = load_data("dataagr.csv")

# Si le chargement a √©chou√©, on arr√™te l'application
if model is None or df is None or df.empty:
    st.error("Le chargement des donn√©es a √©chou√© ou le fichier est vide apr√®s nettoyage. L'application ne peut pas continuer.")
    st.stop()

# =============================================================================
# Calcul de l'ann√©e minimale pour le 'time_index'
# =============================================================================
# Cette valeur est cruciale car elle doit √™tre la m√™me que celle utilis√©e pendant l'entra√Ænement.
min_year = df['year'].min()


# =============================================================================
# Interface utilisateur (Widgets Streamlit)
# =============================================================================

st.subheader("Veuillez faire vos s√©lections :")

# 1. S√©lection de la fili√®re
filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

# 2. S√©lection du produit (filtr√© par fili√®re)
if filiere:
    produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
    if not produits_filtres:
        st.warning("Aucun produit disponible pour cette fili√®re.")
        produit = None
    else:
        produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)
else:
    st.warning("Veuillez d'abord s√©lectionner une fili√®re.")
    produit = None

# On arr√™te si aucun produit n'est s√©lectionn√©
if not produit:
    st.stop()


# 3. S√©lection de l'ann√©e
current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=int(min_year),
    max_value=current_year + 20, # Permet de pr√©dire 20 ans dans le futur
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    # Cr√©ation du DataFrame pour la pr√©diction avec les bonnes caract√©ristiques
    # Le mod√®le attend 'time_index' ET 'time_index_sq'
    time_index_value = selected_year - min_year
    time_index_sq_value = time_index_value ** 2

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'time_index': [time_index_value],
        'time_index_sq': [time_index_sq_value]
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le pour pr√©diction :")
    st.dataframe(input_df)

    try:
        # Le mod√®le attend un DataFrame avec les colonnes correspondantes
        prediction = model.predict(input_df)[0]

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        # Formatage du nombre pour une meilleure lisibilit√©
        st.metric(label="R√©sultat", value=f"{prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error("Une erreur est survenue lors de la pr√©diction.")
        st.error(f"D√©tails de l'erreur : {e}")
