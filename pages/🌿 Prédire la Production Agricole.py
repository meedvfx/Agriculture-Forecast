import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import xgboost as xgb # N√©cessaire pour que pickle puisse charger le mod√®le
from sklearn.base import BaseEstimator, RegressorMixin # N√©cessaire pour la classe personnalis√©e

# =============================================================================
# D√âFINITION DE LA CLASSE DU MOD√àLE PERSONNALIS√â
# =============================================================================
# IMPORTANT : Cette classe doit √™tre d√©finie ici pour que pickle puisse
# charger correctement le mod√®le qui a √©t√© sauvegard√© depuis le notebook.
# C'est la solution √† l'erreur 'AttributeError'.
class LogTransformedModel(BaseEstimator, RegressorMixin):
    def __init__(self, model):
        self.model = model

    def fit(self, X, y):
        # On transforme la cible avec log1p (log(1+y)) pour g√©rer les z√©ros
        y_transformed = np.log1p(y)
        self.model.fit(X, y_transformed)
        return self

    def predict(self, X):
        # On pr√©dit sur l'√©chelle log
        log_predictions = self.model.predict(X)
        # On retransforme les pr√©dictions √† l'√©chelle originale avec expm1 (exp(x)-1)
        predictions = np.expm1(log_predictions)
        # On s'assure qu'aucune pr√©diction n'est n√©gative
        return np.maximum(0, predictions)

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application utilise un mod√®le de Machine Learning avanc√© pour pr√©dire la **quantit√© produite (en tonnes)** selon la **fili√®re**, le **produit** et l‚Äô**ann√©e** s√©lectionn√©e.")
st.divider()

# =============================================================================
# Chargement du mod√®le et des donn√©es
# =============================================================================

@st.cache_resource
def load_model():
    """Charge le pipeline de mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("Le fichier du mod√®le 'modele/modelagr.pkl' n'a pas √©t√© trouv√©. Assurez-vous d'avoir ex√©cut√© le notebook d'entra√Ænement final.")
        return None

@st.cache_data
def load_data(path):
    """Charge et pr√©pare les donn√©es depuis un fichier CSV."""
    try:
        data = pd.read_csv(path)
        data.dropna(subset=['year'], inplace=True)
        data['year'] = data['year'].astype(int)
        return data
    except FileNotFoundError:
        st.error(f"Le fichier de donn√©es '{path}' est introuvable.")
        return None

model = load_model()
df = load_data("data/dataagr.csv")

if model is None or df is None or df.empty:
    st.error("Le chargement des donn√©es ou du mod√®le a √©chou√©. L'application ne peut pas continuer.")
    st.stop()

# =============================================================================
# Calcul de l'ann√©e minimale pour le 'time_index'
# =============================================================================
min_year = df['year'].min()

# =============================================================================
# Interface utilisateur (Widgets Streamlit)
# =============================================================================

st.subheader("Veuillez faire vos s√©lections :")

# 1. S√©lection de la fili√®re
filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

# 2. S√©lection du produit (filtr√© par fili√®re)
if filiere:
    produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
    if not produits_filtres:
        st.warning("Aucun produit disponible pour cette fili√®re.")
        produit = None
    else:
        produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)
else:
    produit = None

if not produit:
    st.stop()

# 3. S√©lection de l'ann√©e
current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=int(min_year),
    max_value=current_year + 20,
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    # Cr√©ation du DataFrame pour la pr√©diction avec les bonnes caract√©ristiques
    time_index_value = selected_year - min_year
    time_index_sq_value = time_index_value ** 2

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'time_index': [time_index_value],
        'time_index_sq': [time_index_sq_value]
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le pour pr√©diction :")
    st.dataframe(input_df)

    try:
        prediction = model.predict(input_df)[0]

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        st.metric(label="R√©sultat", value=f"{prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error("Une erreur est survenue lors de la pr√©diction.")
        st.error(f"D√©tails de l'erreur : {e}")
