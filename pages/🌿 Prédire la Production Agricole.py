import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application pr√©dit la quantit√© produite (en tonnes) selon la fili√®re, le produit et l‚Äôann√©e.")
st.divider()

# =============================================================================
# Fonctions de chargement (VERSION STABLE)
# =============================================================================

@st.cache_resource
def load_model():
    """Charge le mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("ERREUR : Le fichier du mod√®le 'modele/modelagr.pkl' est introuvable.")
        return None
    except Exception as e:
        st.error(f"ERREUR lors du chargement du mod√®le : {e}")
        return None

@st.cache_data
def load_data():
    """Charge et nettoie les donn√©es de mani√®re s√ªre."""
    paths_to_try = ["dataagr.csv", "data/dataagr.csv"]
    data = None
    
    for path in paths_to_try:
        try:
            data = pd.read_csv(path)
            st.success(f"Fichier de donn√©es '{path}' charg√© avec succ√®s.")
            break
        except FileNotFoundError:
            continue

    if data is None:
        st.error("ERREUR : Fichier de donn√©es 'dataagr.csv' introuvable.")
        return None
    
    # La conversion de type pour la colonne 'year' a √©t√© retir√©e
    # On suppose que le fichier CSV est propre, comme dans le notebook.
    return data

# Chargement
model = load_model()
df = load_data()

if model is None or df is None or df.empty:
    st.error("L'application ne peut pas d√©marrer.")
    st.stop()

# =============================================================================
# Interface Utilisateur
# =============================================================================
min_year = df['year'].min()

st.subheader("Veuillez faire vos s√©lections :")

filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

if filiere:
    produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
    produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)
else:
    st.stop()

current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=min_year,
    max_value=current_year + 30,
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    # Pr√©paration des donn√©es pour le mod√®le, exactement comme dans le notebook
    time_index_value = selected_year - min_year

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'year': [selected_year], # Le mod√®le a besoin de 'year'
        'time_index': [time_index_value] # Le mod√®le a besoin de 'time_index'
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le :")
    st.dataframe(input_df)

    try:
        # Pr√©diction directe
        prediction = model.predict(input_df)[0]
        prediction = max(0, prediction) # S'assurer de ne pas avoir de r√©sultat n√©gatif

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        st.metric(label="R√©sultat", value=f"{prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la pr√©diction : {e}")
