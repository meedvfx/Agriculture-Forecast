import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import xgboost as xgb # N√©cessaire pour que pickle puisse charger le mod√®le

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application utilise un mod√®le de Machine Learning avanc√© pour pr√©dire la **quantit√© produite (en tonnes)**.")
st.divider()

# =============================================================================
# Fonctions de chargement (VERSION LA PLUS ROBUSTE)
# =============================================================================

@st.cache_resource
def load_model():
    """Charge le mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("ERREUR : Le fichier du mod√®le 'modele/modelagr.pkl' est introuvable.")
        return None
    except Exception as e:
        st.error(f"ERREUR lors du chargement du mod√®le : {e}")
        return None

@st.cache_data
def load_data():
    """Charge et nettoie les donn√©es de mani√®re tr√®s s√ªre."""
    # Tente de trouver le fichier √† plusieurs emplacements communs
    paths_to_try = ["dataagr.csv", "data/dataagr.csv"]
    data = None
    
    for path in paths_to_try:
        try:
            data = pd.read_csv(path)
            st.success(f"Fichier de donn√©es '{path}' charg√© avec succ√®s.")
            break
        except FileNotFoundError:
            continue

    if data is None:
        st.error("ERREUR : Fichier de donn√©es 'dataagr.csv' introuvable.")
        return None
    
    try:
        # --- Nettoyage final et garanti de la colonne 'year' ---
        # 1. Convertit en format date, les erreurs deviennent invalides (NaT)
        data['year'] = pd.to_datetime(data['year'], errors='coerce')
        # 2. Supprime les lignes avec des dates invalides
        data.dropna(subset=['year'], inplace=True)
        # 3. Extrait l'ann√©e et la convertit en entier (maintenant sans risque)
        data['year'] = data['year'].dt.year.astype(int)
        return data
    except Exception as e:
        st.error(f"ERREUR lors de la pr√©paration des donn√©es : {e}")
        return None

# Chargement
model = load_model()
df = load_data()

# Arr√™t de l'application si le chargement √©choue
if model is None or df is None or df.empty:
    st.error("L'application ne peut pas d√©marrer en raison d'une erreur de chargement.")
    st.stop()

# =============================================================================
# Interface Utilisateur
# =============================================================================
min_year = df['year'].min()

st.subheader("Veuillez faire vos s√©lections :")

filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

if filiere:
    produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
    produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)
else:
    st.stop()

current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=int(min_year),
    max_value=current_year + 30,
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    # Pr√©paration des donn√©es pour le mod√®le
    time_index_value = selected_year - min_year
    time_index_sq_value = time_index_value ** 2

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'time_index': [time_index_value],
        'time_index_sq': [time_index_sq_value]
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le :")
    st.dataframe(input_df)

    try:
        # 1. Le mod√®le pr√©dit la valeur logarithmique
        log_prediction = model.predict(input_df)[0]
        # 2. On applique la transformation inverse (exponentielle)
        final_prediction = np.expm1(log_prediction)
        # 3. On s'assure que le r√©sultat est positif
        final_prediction = max(0, final_prediction)

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        st.metric(label="R√©sultat", value=f"{final_prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la pr√©diction : {e}")
