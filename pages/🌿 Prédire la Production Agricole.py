import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import xgboost as xgb # N√©cessaire pour que pickle puisse charger le mod√®le

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Pr√©diction de la Production Agricole",
    layout="centered",
    page_icon="üåø"
)

st.title("üåø Pr√©diction de la Production Agricole (en Tonnes)")
st.write("Cette application utilise un mod√®le de Machine Learning avanc√© pour pr√©dire la **quantit√© produite (en tonnes)** selon la **fili√®re**, le **produit** et l‚Äô**ann√©e** s√©lectionn√©e.")
st.divider()

# =============================================================================
# Chargement du mod√®le et des donn√©es (VERSION FINALE ROBUSTE)
# =============================================================================

@st.cache_resource
def load_model():
    """Charge le pipeline de mod√®le sauvegard√©."""
    try:
        with open("modele/modelagr.pkl", "rb") as f:
            model = pickle.load(f)
        return model
    except FileNotFoundError:
        st.error("Le fichier du mod√®le 'modele/modelagr.pkl' n'a pas √©t√© trouv√©. Assurez-vous d'avoir ex√©cut√© le notebook d'entra√Ænement final.")
        return None
    except Exception as e:
        st.error(f"Une erreur est survenue lors du chargement du mod√®le : {e}")
        return None

@st.cache_data
def load_data():
    """
    Charge et pr√©pare les donn√©es depuis un fichier CSV de mani√®re tr√®s robuste.
    Tente de trouver le fichier de donn√©es √† plusieurs emplacements.
    """
    paths_to_try = ["dataagr.csv", "data/dataagr.csv"]
    data = None
    loaded_path = None

    for path in paths_to_try:
        try:
            data = pd.read_csv(path)
            loaded_path = path
            break 
        except FileNotFoundError:
            continue

    if data is None:
        st.error(f"Fichier de donn√©es introuvable. Assurez-vous que 'dataagr.csv' se trouve dans le dossier principal ou dans un sous-dossier 'data'.")
        return None
    
    st.success(f"Fichier de donn√©es charg√© avec succ√®s depuis : '{loaded_path}'")

    try:
        # --- Nettoyage robuste de la colonne 'year' (identique au notebook) ---
        data['year'] = pd.to_datetime(data['year'], errors='coerce')
        data.dropna(subset=['year'], inplace=True)
        data['year'] = data['year'].dt.year.astype(int)
        return data
    except Exception as e:
        st.error(f"Une erreur est survenue lors de la pr√©paration des donn√©es : {e}")
        return None

# Chargement des donn√©es et du mod√®le
model = load_model()
df = load_data()

if model is None or df is None or df.empty:
    st.error("Le chargement des donn√©es ou du mod√®le a √©chou√©. L'application ne peut pas continuer.")
    st.stop()

# =============================================================================
# Calcul de l'ann√©e minimale pour le 'time_index'
# =============================================================================
min_year = df['year'].min()

# =============================================================================
# Interface utilisateur
# =============================================================================

st.subheader("Veuillez faire vos s√©lections :")

filieres = sorted(df['Fili√®re'].dropna().unique().tolist())
filiere = st.selectbox("1. S√©lectionnez la fili√®re :", filieres)

if filiere:
    produits_filtres = sorted(df[df['Fili√®re'] == filiere]['Produit'].dropna().unique().tolist())
    if not produits_filtres:
        st.warning("Aucun produit disponible pour cette fili√®re.")
        produit = None
    else:
        produit = st.selectbox("2. S√©lectionnez le produit :", produits_filtres)
else:
    produit = None

if not produit:
    st.stop()

current_year = datetime.now().year
selected_year = st.number_input(
    "3. S√©lectionnez l'ann√©e de pr√©diction :",
    min_value=int(min_year),
    max_value=current_year + 30, # Augmentation de la port√©e
    value=current_year
)

# =============================================================================
# Pr√©diction
# =============================================================================

if st.button("üöÄ Lancer la pr√©diction", type="primary"):
    time_index_value = selected_year - min_year
    time_index_sq_value = time_index_value ** 2

    input_data = {
        'Fili√®re': [filiere],
        'Produit': [produit],
        'time_index': [time_index_value],
        'time_index_sq': [time_index_sq_value]
    }
    input_df = pd.DataFrame(input_data)

    st.write("---")
    st.write("Donn√©es envoy√©es au mod√®le pour pr√©diction :")
    st.dataframe(input_df)

    try:
        # Le mod√®le a √©t√© entra√Æn√© sur le log de la production
        # Il faut donc appliquer la transformation inverse (exponentielle)
        log_prediction = model.predict(input_df)[0]
        final_prediction = np.expm1(log_prediction)
        final_prediction = max(0, final_prediction) # S'assurer de ne pas avoir de r√©sultat n√©gatif

        st.success(f"### Production pr√©dite pour **{produit}** en **{selected_year}** :")
        st.metric(label="R√©sultat", value=f"{final_prediction:,.0f} Tonnes".replace(',', ' '))

    except Exception as e:
        st.error("Une erreur est survenue lors de la pr√©diction.")
        st.error(f"D√©tails de l'erreur : {e}")
